const http = require('http')
const path = require('path');
const fs = require('fs')
const mimeType  = require('./mimeType')

function app(port){
    this.routes = {
        GET:{}, //get请求
        POST:{}, //post请求
        STATIC:{} //静态资源
    }
    http.createServer((req,res) => {
        const pathname = path.parse(req.url);
        const method = req.method
        if(pathname.ext){
            res.setHeader('content-type',mimeType[pathname.ext] || 'text/plain')
            Object.values(this.routes.STATIC).reduce((sum,p) => {
                return sum.then(p.bind(this,req,res))
            },Promise.resolve()).then(() => {
                res.end('404')
            }).catch(err => {
                if(err) console.log(err)
            })
        }else {
            try {
                res.setHeader('content-type','application/json')
                this.routes[method][req.url](req,res)
            } catch (error) {
                res.end('500 sever error')
            }
        }
    }).listen(port)
    console.log(`server is ready on ${port}`)
}

app.prototype.static = function(dir){
    this.routes.STATIC[dir] = function(req,res){
        return new Promise((resolve,reject) => {
            fs.readFile(path.resolve(dir,'./'+req.url),function(err,data){
                if (err) {
                    resolve(req,res)
                }else {
                    res.end(data)
                    reject()
                }
            })
        })

    }
}

app.prototype.get = function(routePath,cb) {
    this.routes.GET[routePath] = cb
}

app.prototype.post = function(routePath,cb) {
    this.routes.POST[routePath] = cb
}

app.prototype.GAP = function(routePath,cb) {
    this.get(routePath,cb)
    this.post(routePath,cb)
}

module.exports = app
